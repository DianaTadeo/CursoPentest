#!/bin/python
"""
Escaner de puertos con Scapy
Funciona como un escaner para puertos con escaneo tipo
Syn y UDP.

ES NECESARIA LA EJECUCION CON PERMISOS DE ROOT

Autor: Diana Tadeo

"""
from time import time
import argparse
from scapy.all import *
from sys import exit


# Preparacion de argumentos
parser = argparse.ArgumentParser("Escaner de puertos.")
parser.add_argument("-t", "--target", help="IP del host a escanear.", required=True)
parser.add_argument("-p", "--ports", type=int, nargs="+", help="Especifica los puertos separados por espacio \'21 23 80 ...\' ")
parser.add_argument("-u", "--udp", help="Escaneo tipo UDP. Por defecto es TCP.")
args = parser.parse_args()


target = args.target
well_known= False
if args.ports:
	ports = args.ports
else:
	# Puertos bien conocidos por defecto
	ports = range(1, 1024)
	well_known= True

# Formato de salida para los puertos escaneados 
def ports_format(port, state):
	print("  %s | --> State: %s" % (port, state))

def host_up(target):
	try:
		icmp = IP(dst=ip)/ICMP()
		resp = sr1(icmp, verbose=0, timeout = 1)
		if resp:
			return True
		else:
			return False
	except socket.error:
		print ("Insuficientes permisos")
		exit (1)

# Escaneo tipo Syn
def syn(target, ports):
	if well_known:
		print("Iniciando escaneo tipo SYN en %s en los puertos bien conocidos")
	else:
		print("Iniciando escaneo tipo SYN en %s con los puertos %s" % (target, ports))
	sport = RandShort()
	for port in ports:
		resp = sr1(IP(dst=target)/TCP(sport=sport, dport=port, flags="S"), timeout=2, verbose=0)
		if resp != None:
			if resp.haslayer(TCP):
				if resp[TCP].flags == 20:
					ports_format(port, "Closed")
				elif resp[TCP].flags == 18:
					ports_format(port, "Open")
				else:
					ports_format(port, "Filtered")
			elif resp.haslayer(ICMP):
				ports_format(port, "Filtered")
			else:
				ports_format(port, "Unknown")
				print(resp.summary())
		else:
			ports_format(port, "Closed | Filtered")


# Escaneo tipo UDP
def udp(target, ports):
	if well_known:
		print("Iniciando escaneo tipo UDP en %s en los puertos bien conocidos")
	else:
		print("Iniciando escaneo tipo UDP en %s con los puertos %s" % (target, ports))
	for port in ports:
		resp = sr1(IP(dst=target)/UDP(sport=port, dport=port), timeout=2, verbose=0)
		if resp == None:
			ports_format(port, "Open | Filtered")
		else:
			if resp.haslayer(ICMP):
				ports_format(port, "Closed")
			elif resp.haslayer(UDP):
				ports_format(port, "Open | Filtered")
			else:
				ports_format(port, "Unknown")
				print(resp.summary())

if __name__ == '__main__':
	start_time = time.time()
	if host_up(target)== False :
		print("El host no es correcto, esta inaccesible o se encuentra protegido y puede que el escaneo no funcione correctamente.")
	try:
		if args.udp:
			udp(target, ports)
		else:
			syn(target, ports)
	except socket.error:
		print("No se pudo realizar el escaneo sobre el host : %s " %(host))

	duracion = time.time() - start_time
	print ("Duracion del escaneo: %s " % (duracion))